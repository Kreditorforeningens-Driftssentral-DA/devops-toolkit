/////////////////////////////////////////////////
// MODULE VARIABLES
/////////////////////////////////////////////////

variable "vcenter_credentials" {
  type = object({
    server   = string
    insecure = bool
    #username = string
    #password = string
  })
}

variable "vsphere" {
  type = object({
    folder     = string
    datacenter = string
    cluster    = string
    network    = string
    datastore  = string
    template   = string
  })
}

variable "name" {
  type = string
  default = "tfvm0"
}

variable "network_static" {
  type = object({
    address = string
    netmask = string
    gateway = string
  })
  default = {
    address = "172.16.4.10"
    netmask = "24"
    gateway = "172.16.4.1"
  }
}

variable "dns_servers" {
  type    = list(string)
  default = ["1.1.1.1","8.8.8.8"]
}

variable "resources" {
  type = object({
    cpus      = optional(number)
    memory_mb = optional(number)
    disk_gb   = optional(number)
  })
  default = {}
}

variable "options" {
  type = object({
    annotation = optional(string)
  })
  default = {}
}

variable "cloud_config_ovf" {
  type = string
  description = "The ovf-datasource runs before VMware datasource when deploying e.g. Ubuntu cloud-images. This ensures cloud-init will run VMware datasource on next reboot."
  default = <<-HEREDOC
  users:
  - default
  - name: local
    gecos: local administrator
    sudo: "ALL=(ALL) NOPASSWD:ALL"
    groups: users,admin
    # Password: T3rraf0rm
    passwd: $6$rounds=4096$uOqf.bWM$oV7QJ8x5pRz5RB.6qfRbqHQLkt8K.L67NdW9.k5g9idjy1v72lNEDA7YHym7v90DNocbFMs.QABrdvAJOXt9T/
    lock_passwd: false
  write_files:
  - 
    path: /etc/cloud/cloud.cfg.d/99-DatasourceVMware.cfg
    owner: root:root
    content: |
      datasource_list: [ "VMware","None" ]
    permissions: '0644'
  -
    path: /etc/modprobe.d/blacklist-floppy.conf
    content: |
      blacklist floppy
    permissions: '0644'
  runcmd:
  - [ "cloud-init","clean" ]
  power_state:
    timeout: 10 # Seconds before rebooting, after cloud-init finishes
    mode: reboot
  HEREDOC
}

variable "cloud_config_vmware" {
  description = "VMware datasource configuration."
  type = list(object({
    filename = string
    content  = string
  }))
  default = [{
    filename = "userdata.yml"
    content = <<-HEREDOC
    timezone: Europe/Oslo
    locale: nb_NO
    users:
    -
      default
    -
      name: tf
      gecos: Terraform Administrator
      shell: /bin/bash
      sudo: ALL=(ALL) NOPASSWD:ALL
      groups: sudo,wheel
      lock_passwd: true
      # Vagrant public key (insecure). Private key: https://github.com/hashicorp/vagrant/blob/master/keys/vagrant
      ssh_authorized_keys:
      - ssh-rsa AAAAB3NzaC1yc2EAAAABIwAAAQEA6NF8iallvQVp22WDkTkyrtvp9eWW6A8YVr+kz4TjGYe7gHzIw+niNltGEFHzD8+v1I2YJ6oXevct1YeS0o9HZyN1Q9qgCgzUFtdOKLv6IedplqoPkcmF0aYet2PkEDo3MlTBckFXPITAMzF8dJSIFo9D8HfdOV0IAdx4O7PtixWKn5y2hMNG0zQPyUecp4pzC6kivAIhyfHilFR61RGL+GPXQ2MWZWFYbAGjyiYJnAmCP3NOTd0jMZEnDkbUvxhMmBYSdETk1rRgm+R4LOzFUGaHqHDLKLX+FIPKcF96hrucXzcWyLbIbEgE98OHlnVYCzRdK8jlqm8tehUc9c9WhQ==
    system_info: 
      default_user:
        name: ubuntu
        gecos: Ubuntu user
        shell: /bin/bash
        plain_text_passwd: ubuntu
        lock_passwd: true
        sudo: ["ALL=(ALL) NOPASSWD:ALL"]
    ssh_pwauth: false
    disable_root: true
    final_message: |
      cloud-init finished!
      version: $version
      timestamp: $timestamp
      datasource: $datasource
      uptime: $uptime
    HEREDOC
  },{
    filename = "files.yml"
    content = <<-HEREDOC
    write_files:
    -
      path: /opt/generated.txt
      permissions: "0644"
      content: |
        This file was generated by Cloud-Init
      owner: root:root
    HEREDOC
  }]
}

variable "cloud_config_vmware_scripts" {
  type = list(object({
    filename = string
    content  = string
  }))
  default = [{
    filename = "example.sh"
    content = <<-HEREDOC
    #!/usr/bin/env bash
    printf "This line is appended by cloud-init script!\n" | tee -a /opt/generated.txt
    HEREDOC
  }]
}

/////////////////////////////////////////////////
// DEFINITIONS
/////////////////////////////////////////////////

locals {
  vcenter_credentials = var.vcenter_credentials
  vsphere             = var.vsphere
  vm_name             = var.name
  network             = var.network_static
  dns_servers         = var.dns_servers

  cloud_config_ovf     = var.cloud_config_ovf
  cloud_config_vmware  = var.cloud_config_vmware
  cloud_config_vmware_scripts = var.cloud_config_vmware_scripts
}

locals {
  resources = defaults(var.resources,{
    cpus      = 2
    memory_mb = 1024
    disk_gb   = 20
  })

  options = defaults(var.options,{
    annotation = "Deployed by Terraform"
  })
}
